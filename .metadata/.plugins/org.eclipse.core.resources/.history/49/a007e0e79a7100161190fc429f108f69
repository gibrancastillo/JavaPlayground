<?xml version="1.0" encoding="UTF-8"?>
<!-- This web.xml file is not required when using Servlet 3.0 container,
     see implementation details http://jersey.java.net/nonav/documentation/latest/jax-rs.html -->
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
    <servlet>
    		<!-- Jersey Servlet doing bootstrap and handling the HTTP Request/Response in this RESTful Web Application which is acting like a RESTful Web Service -->
        <servlet-name>Jersey Web Application</servlet-name>
        <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>
        <init-param>
        		<!-- The name of the package where you want Jersey to look up Resource classes -->
            <param-name>jersey.config.server.provider.packages</param-name>
            <param-value>com.ccc.messenger</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>Jersey Web Application</servlet-name>
        <!-- Any HTTP Request that comes to this RESTful Web App that has /webapi/ in the front of the URI is handle by the Jersey Web Application Servlet  -->
        <url-pattern>/webapi/*</url-pattern>
    </servlet-mapping>
</web-app>

<!-- 
The way we configure and bootstrap the JAX-RS Application (RESTful Web Application) was by writing a Jersey Servlet in web.xml and this is how
the RESTful Web Application is bootstrap, so when an HTTP Request came in it was the Jersey Servlet who handle it and then passed control to
messenger (the RESTful Web Application) classes and code.  This design requires you to use a Servlet and hence you need a Servlet Container like tomcat to bootstrap.
  -->
