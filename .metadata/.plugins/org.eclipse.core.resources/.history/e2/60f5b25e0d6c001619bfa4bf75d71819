package com.ccc.messenger.resources;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;

/**
 * This is a sub-resource based class use by root resource(s).
 * The value in the @Path annotation at the class level is only going to have "/", no real value denoting that the path value to be use is the remainder
 * of the path coming from the root resource; in other words, if the user executed http://localhost:8080/messenger/webapi/messages/12/comments/1, then the
 * root resource method call was map with '/12/comments' and the remainder '1' would be pass to this sub resource to be use by the correct method in this
 * sub resource class based on the HTTP Request method and the method's @Path('{commentId}) map to the remainder of the path pass to this sub-resource class.
 * NOTE that the class level @Path annotation is optional for sub resources.
 * 
 * This design allows us to have separate APIs and separate resources so we don't put all of them in the parent or root resource, you can actually delegate
 * API calls in other sub resources.
 * 
 * @author gecasti
 *
 */
@Path("/")
public class CommentResource {
	
	@GET
	public String getComments() {
		return "sub resource getComments()";
	}
	
	/**
	 * The commentId is part of the remainder of the path pass on to this sub resource; however, this sub-resource has access to the messageId which is part of
	 * the parent or root resource annotation but since this is the call which actually lead to this method been executed, the messageId param is available to this method as well.	 
	 * 
	 * @param messageId
	 * @param commentId
	 * @return
	 */
	@GET
	@Path("/{commentId}")
	public String getComment(@PathParam("messageId") long messageId, @PathParam("commentId") long commentId) {
		return "sub resource getComment() id: " + commentId + " for message id: " + messageId;
	}
}