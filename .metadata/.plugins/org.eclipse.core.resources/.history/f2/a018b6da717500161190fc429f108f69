package com.ccc.rest;

import java.lang.annotation.Annotation;
import java.lang.reflect.Type;
import java.util.Calendar;

import javax.ws.rs.ext.ParamConverter;
import javax.ws.rs.ext.ParamConverterProvider;

public class MyDateParamConverterProvider implements ParamConverterProvider {
	
	/**
	 * These three parameter in the method arguments (Class<T> rawType, Type genericType, Annotation[] annotations) are what Jersey sends to the
	 * ParamConverterProvider to see if it can provide the custom ParaConverter back so it sends the 'rawType', which is the custom data type, it sends the generic type
	 * in case you are dealing with a custom generic data type and it also sends a list of annotations, so this is an area of annotations so in the case of a @PathParam
	 * then a @PathParam would be one of the annotations in the list of annotations
	 */
	@Override
	public <T> ParamConverter<T> getConverter(Class<T> rawType, Type genericType, Annotation[] annotations) {
		if(rawType.getName().equals(MyDate.class.getName())) {
			// Return the right custom param converter.  The following is anonymous inner class
			return new ParamConverter<T>() {
				
				@Override
				public T fromString(String value) {
					Calendar requestedDate = Calendar.getInstance();  // Today's date
					
					if(value.equalsIgnoreCase("tomorrow")) {
						requestedDate.add(Calendar.DATE, 1);
					} else if(value.equalsIgnoreCase("yesterday")) {
						requestedDate.add(Calendar.DATE, -1);
					}
					
					MyDate myDate = new MyDate();
					myDate.setDate(requestedDate.get(Calendar.DATE));
					myDate.setMonth(requestedDate.get(Calendar.MONTH));
					myDate.setYear(requestedDate.get(Calendar.YEAR));
					
					return rawType.cast(myDate);
				}
				
				@Override
				public String toString(T myBean) {
					if(myBean == null) {
						return null;
					}
					
					return myBean.toString();
				}
			};
		}
		
		return null;
	}
}