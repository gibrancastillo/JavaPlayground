package com.ccc.bst;

/**
 * A Tree has top node known as the root.  The lines that connect all of the nodes there after are known as paths or edges.
 * A leaf is a node that does not have any children nodes.  
 * A subtree is a section of the tree.
 * 
 * A Binary Tree is the same as the tree, but it will only will ever have two children nodes and the keys to create binary 
 * trees have parent node or root node key has the middle value, the left node key has the lesser value of the parent and the right node key 
 * has the greater value of the parent.
 * 
 * Random data normally is not going to create an unbalanced tree.  An unbalanced tree is where most of the nodes are found one side
 * of the root node.  However, ordered data tends to create unbalanced trees.  Unbalanced trees are bad because they are slow.
 * 
 * Why use a binary tree?
 * 1. You can search, insert and delete items quickly in a tree.
 * 2. Ordered Arrays are bad at insertions and deletions.
 * 3. Finding items in a Linked List is slow.
 * 4. Time needed to perform an operation on a tree is O(log N).
 * 5. On average a tree is more efficient if you need to perform many different types of operations.
 * 
 * There are three types of Traversals (Traversing the nodes in the Binary Tree):
 * 1. In Order Traversal
 * 2. 
 * 3. 
 * 
 * @author gecasti
 *
 */
public class BinaryTree {
	Node root;
	
	public void addNode(int key, String name) {
		Node newNode = new Node(key, name);
		
		if(root == null) {
			root = newNode;
		} else {
			Node focusNode = root;
			Node parent;  //future parent of new node
			
			while(true) {
				parent = focusNode;
				
				//Should the new node go on the left side or the right side of the parent node
				if(key < focusNode.key) {
					//The left child node has to have key value that is less than the parent node key value
					focusNode = focusNode.leftChild;
					
					if(focusNode == null) {
						/*
						 * The parent node has no left child node; therefore, add (create) 
						 * new node to the left of the parent node in the binary tree.
						 */
						parent.leftChild = newNode;
						return;
					}
				} else {
					//The right child node has to have key value that is equal or greater than the parent node key value
					focusNode = focusNode.rightChild;
					
					if(focusNode == null) {
						/*
						 * The parent node has no right child node; therefore, add (create) 
						 * new node to the right of the parent node in the binary tree.
						 */
						parent.rightChild = newNode;
						return;
					}
				}
			}
		}
	}
	
	/**
	 * Traversing Nodes in a Binary Tree - In Order Traversal:  The key values are increasing as we traverse the Binary Tree.
	 * <> Aim for the smallest value first; therefore, start at 1st Left Child Node from the root node.
	 * <> When Null Node is reached then move up in value.
	 * 
	 * Using recursion to accomplish this
	 * 
	 * @param focusNode
	 */
	public void inOrderTraverseTree(Node focusNode) {
		if(focusNode != null) {
			inOrderTraverseTree(focusNode.leftChild);
			System.out.println(focusNode);
			inOrderTraverseTree(focusNode.rightChild);
		}
	}
	
	/**
	 * Traversing Nodes in a Binary Tree - Pre Order Traversal:  The key values are print out as you traverse the Binary Tree.
	 * <> First hit our main focus Node, if we start we root Node, then we go with root Node first.
	 * <> Then cycle down thru all of the left children nodes.
	 * <> Then jump up one parent when we hit null in the left most child Node and go to the right child node.
	 * <> Then jump up to root Node and go thru the right child Nodes.
	 * 
	 * Using recursion to accomplish this
	 * 
	 * @param focusNode
	 */
	public void preOrderTraverseTree(Node focusNode) {
		if(focusNode != null) {
			System.out.println(focusNode);
			preOrderTraverseTree(focusNode.leftChild);
			preOrderTraverseTree(focusNode.rightChild);
		}
	}
	
	/**
	 * Traversing Nodes in a Binary Tree - In Post Order Traversal:  The key values are print out as we traverse the Binary Tree with left child, right child and then parent.
	 * <> First hit our main focus Node, if we start we root Node, then we go with root Node first.
	 * <> Aim for the smallest value first; therefore, start at 1st Left Child Node from the root node.
	 * <> Then go to the right child node of the parent Node.
	 * <> Then jump up to the parent Node.
	 * <> Then jump up to root Node and go thru the right child Nodes.
	 * <> Root Node comes last.
	 * 
	 * Using recursion to accomplish this
	 * 
	 * @param focusNode
	 */
	public void postOrderTraverseTree(Node focusNode) {
		if(focusNode != null) {
			postOrderTraverseTree(focusNode.leftChild);
			postOrderTraverseTree(focusNode.rightChild);
			System.out.println(focusNode);
		}
	}
	
	/**
	 * 
	 * @param key an integer value that represents the Node you are looking for.
	 * @return
	 */
	public Node findNode(int key) {
		Node focusNode = root;
		
		while(focusNode.key != key) {
			
			if(key < focusNode.key) {
				//search down the left child Node side
				focusNode = focusNode.leftChild;
			} else {
				//search down the right child Node side
				focusNode = focusNode.rightChild;
			}
			
			if(focusNode == null) {
				//We did not find the Node in the Binary Tree.
				return null;
			}
		}
		
		return focusNode;
	}
	
	public boolean removeNode(int key) {
		Node focusNode = root;
		Node parent = root;
		
		boolean isItALeftChild = true;
		
		// Finding the Node to delete in the Binary Tree
		while(focusNode.key != key) {
			// 1. Find Node to be deleted in the binary tree
			parent = focusNode;
			
			if(key < focusNode.key) {
				isItALeftChild = true;
				focusNode = focusNode.leftChild;
			} else {
				isItALeftChild = false;
				focusNode = focusNode.rightChild;
			}
			
			if(focusNode == null) {
				// The Node we are trying to delete was not found in the Binary Tree
				return false;
			}
		}
		
		// Deleting the Node
		if(focusNode.leftChild == null && focusNode.rightChild == null) {
			// 2. Node to be deleted is a leaf Node or does not have any children Nodes
			
			if(focusNode == root) {
				/*
				 * The focus Node or the Node to remove does not have a left or right child Node and
				 * the focus Node or the Node to remove is equal to the root Node then delete root Node.
				 */
				root = null;
			} else if(isItALeftChild) {
				/*
				 * The focus Node was marked as a left child Node of the parent Node; therefore,
				 * delete the focus Node on it's parent or delete the parent's left child Node.
				 */
				parent.leftChild = null;
			} else {
				/*
				 * The focus Node was marked as a right child Node of the parent Node; therefore,
				 * delete the focus Node on it's parent or delete the parent's right child Node.
				 */
				parent.rightChild = null;
			}
		} else if(focusNode.rightChild == null) {
			// 3. Node to be deleted does not have a right child Node.
			if(focusNode == root) {
				root = focusNode.leftChild;
			} else if(isItALeftChild) {
				parent.leftChild = focusNode.leftChild;
			} else {
				parent.rightChild = focusNode.leftChild;
			}
		} else if(focusNode.leftChild == null) {
			// 4. Node to be deleted does not have a left child Node.
			if(focusNode == root) {
				root = focusNode.rightChild;
			} else if(isItALeftChild) {
				parent.leftChild = focusNode.rightChild;
			} else {
				parent.rightChild = focusNode.rightChild; // focusNode.leftChild; ??
			}
		} else {
			// 5. Node to be deleted has a left Node and a right Node.
			Node replacement = getReplacementNode(focusNode);
			
			if(focusNode == root) {
				// The replacement Node is root's right child node
				root = replacement;
			} else if(isItALeftChild) {
				parent.leftChild = replacement;
			} else {
				parent.rightChild = replacement;
			}
			
			replacement.leftChild = focusNode.leftChild;
		}
		
		return true;
	}
	
	/**
	 * 
	 * @param replacedNode is the Node to be replace
	 * @return
	 */
	public Node getReplacementNode(Node replacedNode) {
		Node replacementParent = replacedNode;
		Node replacement = replacedNode;
		
		// Moving the right child up
		Node focusNode = replacedNode.rightChild;
		
		while(focusNode != null) {
			// While they are no more left child Nodes keep going
			replacementParent = replacement;
			replacement = focusNode;
			
			// Moving the left child up
			focusNode = focusNode.leftChild;
		}
		
		if(replacement != replacedNode.rightChild) {
			replacementParent.leftChild = replacement.rightChild;
			replacement.rightChild = replacedNode.rightChild;
		}
		
		return replacement;
	}
}













