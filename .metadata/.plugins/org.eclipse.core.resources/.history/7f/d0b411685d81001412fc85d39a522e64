package com.ccc.playground;

/**
 * Design an algorithm and write code to remove the duplicate characters in a string without using any additional buffer.
 * NOTE: One or two additional variables are fine. An extra copy of the array is not.
 * First, ask yourself, what does an additional buffer mean?  Can we use an additional array of constant size?
 * 
 * Algorithm—No (Large) Additional Memory:
 * 1. For each character, check if it is a duplicate of already found characters.
 * 2. Skip duplicate characters and update the non duplicate characters.
 * 
 * @author gecasti
 *
 */
public class RemoveDuplicateCharsAlgorithm {
	
	public static void removeDuplicateChars(char[] str) {
		// Test Case:  Null string
		if(str == null) {
			return;
		}
		
		int len = str.length;
		
		// Test Case:  String contains one character, no possible duplicates.
		if(len < 2) {
			return;
		}
		
		int tail = 1;
		
		System.out.println("using i++ in for loop:");
		for(int i = 0; i < len; i++) {
			System.out.println("str[" + i + "]: " + str[i]);
		}
		
		System.out.println();
		System.out.println("using ++i in for loop:");
		for(int i = 0; i < len; ++i) {
			System.out.println("str[" + i + "]: " + str[i]);
		}
	}
	
	/**
	 * Test Cases:
	 * 1. String does not contain any duplicates, e.g.: abcd
	 * 2. String contains all duplicates, e.g.: aaaa
	 * 3. Null string
	 * 4. String with all continuous duplicates, e.g.: aaabbb
	 * 5. String with non-contiguous duplicate, e.g.: abababa
	 * 
	 * @param agrs
	 */
	public static void main(String[] agrs) {
		String s = "helloiloveyou";
		char[] charArr = s.toCharArray();
		removeDuplicateChars(charArr);
		
	}
}