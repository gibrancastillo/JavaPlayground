package com.ccc.messenger.resources;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;

import com.ccc.messenger.model.Message;
import com.ccc.messenger.service.MessageService;
import com.sun.xml.internal.bind.v2.Messages;

/**
 * Resource based (not action based) URI class API.  In this case the resource is 'messages'.  The HTTP Methods tell you the operation to be made on the resource.
 * 
 * HTTP Request       SQL          Operation   
 *   Method        Statement
 * <> POST   --->   INSERT     --> 'C'reate              (Non-Idempotence)
 * <> GET    --->   SELECT     --> 'R'ead (Retrieve)
 * <> PUT    --->   UPDATE     --> 'U'pdate (Modify)     (Idempotence)
 * <> DELETE --->   DELETE     --> 'D'elete (Destroy)
 * 
 * You can use the HTTP Method POST to perform an update operation; however, the standard practice is to use the HTTP Method PUT.  HTTP Method POST is use for creating a new resource.
 * The HTTP Method GET is read-only; while POST, PUT and DELETE are write HTTP Methods.
 * The following are repeatable (Idempotence) HTTP Methods:  GET, PUT and DELETE.  Meaning that can be applied safely multiple times without changing the result beyond the initial application.
 * The HTTP Method POST cannot be repeated safely (Non-Idempotence).
 * 
 * 
 * A bit uncommon:  HEAD, OPTIONS, etc.
 * 
 * Since every method in this resource based class either consumes or produces a JSON, then you can move their annotations from the method to the class, to make them global, centralized
 * and accessible and utilize by every method in this resource based class.
 * 
 * @author gecasti
 *
 */
@Path("/messages")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
public class MessageResource {
	private MessageService messageService = new MessageService();
	
	/**
	 * The annotation @Produces(MediaType.APPLICATION_XML) tells Jersey to send an HTTP Response in an XML format.  Changing MediaType.APPLICATION_XML
	 * to MediaType.APPLICATION_JSON tells Jersey to send an HTTP Response in a JSON format.  However, for this to work, that is, for a java object
	 * to be converted to JSON and vice versa you have to add the jersey-media-moxy.jar because there is no JSON converter that comes out of the box
	 * (Jersey or JSD or JEE) and JAXB only handles XML conversion from java object to XML and vice versa.
	 * 
	 * Message Body Writer is a class that converts from a Java type or object to a JSON or XML.  The annotation @Produces calls the correct Message
	 * Body Writer which does the conversion from a Java object to JSON.
	 * 
	 * http://localhost:8080/messenger/webapi/messages
	 * Protocol:  http
	 * Tomcat Server Hostname:  localhost
	 * Tomcat Server Port:  8080
	 * Java REST API WebApp Context:  messenger
	 * Java REST API WebApp URL Pattern:  webapi
	 * Java REST API WebApp Resource:  messages
	 * 
	 * Since we cannot have another method to get all the messages base on year (filtering) or pagination (start & size),
	 * we have to modify getMessages() from looking like this to what it looks now
	 * @GET
	 * public List<Message> getMessages() {
	 *     return messageService.getAllMessages();
	 * }
	 * 
	 * To be able to filter by year http://localhost:8080/messenger/webapi/messages?year=2016 you need to get a hold of the year query parameter by using the
	 * annotation @QueryParam for year and this you annotate in the method argument.  Now Jersey can differentiate between API URI calls, so when the client executes or calls
	 * http://localhost:8080/messenger/webapi/messages without the year query parameter, then the query parameter year value is '0', which maps to getAllMessages() and
	 * http://localhost:8080/messenger/webapi/messages?year=2016 to getAllMessagesFilterByYear(year)
	 * 
	 * To be able to paginate by start (zero base) and size http://localhost:8080/messenger/webapi/messages?start=2&size=1 you need to get a hold of the start and size query parameter
	 * by using the annotation @QueryParam for index and size, which are annotated in the method argument.
	 * 
	 * @return
	 */
	@GET
	public List<Message> getMessages(@QueryParam("year") int year,
									 @QueryParam("start") int start,
									 @QueryParam("size") int size) {
		if(year > 0) {
			//Filtering
			return messageService.getAllMessagesFilterByYear(year);
		}
		
		//start is zero based; however, don't change the size to >= 0 or the getAllMessages() method will never be called!
		if(start >= 0 && size > 0) {
			//Pagination
			return messageService.getAllMessagesPaginated(start, size);
		}
		
		return messageService.getAllMessages();
	}
		
	// pagination, in this case get 20 messages starting at index 9  http://localhost:8080/messenger/webapi/messages?start=10&size=20
	
	/**
	 * Accessing Path params.  The @Path annotation can be map to the method as well; therefore, this API call
	 * http://localhost:8080/messenger/webapi/messages/1 will return message object with id 1.  This is a dynamic API call.
	 * The curly braces "{}" tell Jersey that text within the curly braces is a variable, which a portion of the URI, making it a dynamic API call.
	 * In this case we name the variable 'messageId'.  To capture or get a hold of the 'messageId' variable and send it to the MessageService class use the Jersey
	 * feature that actually passes in the value in 'messageId' as a method argument, to make that happen use the Jersey annotation @PathParam, which tells Jersey
	 * to inject the value of the variable 'messageId' from the dynamic API call into the method argument.  Jersey will try to convert the value of the variable
	 * 'messageId' from the dynamic API call to the data type of the method argument, in this case long.
	 * 
	 * @return
	 */
	@GET
	@Path("/{messageId}")
	public Message getMessage(@PathParam("messageId") long id) {
		return messageService.getMessage(id);
	}
	
	/**
	 * Accessing Path params.  The @Path annotation can be map to the method as well; therefore, this API call
	 * http://localhost:8080/messenger/webapi/messages/test will return "respond with test"  The problem with this is that this API call is static
	 * @return
	 */
	@GET
	@Path("/test")
	@Produces(MediaType.TEXT_PLAIN)
	public String test() {
		return "respond with test";
	}
	
	/**
	 * For this to work properly the HTTP POST Request calling this API method should have in the Header the parameter "Content-Type = application/json"
	 * and the Body (payload) should be in JSON format.  Moreover, in this method API accept the Model type (in this case Message.java) as argument to
	 * bind to the HTTP POST Request body.  With this requirements met, Jersey knows to convert the HTTP POST Request body in JSON format to the Message Java object.
	 * 
	 * The @Produces annotation produces a JSON output to return back to the client.  Since this method consumes a JSON output coming from the client
	 * then you need to add the @Consumes annotation.  The @Post annotation maps the HTTP POST Request to this method.
	 * 
	 * You can use the HTTP Method POST to perform an update operation; however, the standard practice is to use the HTTP Method PUT.  HTTP Method POST is use for creating a new resource.
	 * Therefore, this method creates or adds a new message.
	 *  
	 * @param message
	 * @return
	 */
	@POST
	public Message addMessage(Message message) {
		return messageService.addMessage(message);
	}
	
	/**
	 * You need the message id to update or modify the message you are targeting to change; therefore, you want the API URI to provide the message id in case the message id
	 * is not provided in the HTTP PUT Request body in JSON format.
	 * 
	 * You can use the HTTP Method POST to perform an update operation; however, the standard practice is to use the HTTP Method PUT.  HTTP Method POST is use for creating a new resource.
	 * Therefore, this method updates or modifies an existing message.
	 * 
	 * @param message
	 * @return
	 */
	@PUT
	@Path("/{messageId}")
	public Message updateMessage(@PathParam("messageId") long id, Message message) {
		message.setId(id);
		return messageService.updateMessage(message);
	}
	
	@DELETE
	@Path("/{messageId}")
	public void deleteMessage(@PathParam("messageId") long id) {
		messageService.removeMessage(id);
	}	
}