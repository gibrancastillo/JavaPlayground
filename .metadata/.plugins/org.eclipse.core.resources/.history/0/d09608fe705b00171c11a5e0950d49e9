package com.ccc.ht.openhashing;

import java.util.Scanner;

/**
 * The Linked Stack implementation is a simplified version of the Linked List implementation.
 * Elements or nodes are inserted (push) and removed (pop) only from the head of the list (first link or node).
 * The header node is not used because no special case code is required for lists of zero or one elements.
 * 
 * A Singly Linked Stack List that will be reference in the indices in the hash table [array].
 * 
 * The freelist is an example of a linked stack.  A freelist holds those list nodes that are not currently used.
 * When a node (link or element) is deleted from a linked list, it is placed at the head of the freelist.
 * When a new element is to be added to a linked list, the freelist is checked to see if a list node is available.
 * If so, the node is take from the freelist.  If the freelist is empty, or does not have the node you are looking
 * for the standard new operator can still be called.
 * 
 * @author gecasti
 *
 */
public class WordList {
	// Reference to first Link in list (head).  The last Link added to the LinkedList
	public Word firstWord = null;
	
	public void insert(Word newWord, int hashKey) {
		Word previous = null;
		Word current = firstWord;
		newWord.key = hashKey;
		
		while(current != null && newWord.key > current.key) {
			// inserting new Words or nodes in order by key value in the singly linked stack list
			previous = current;
			current = current.next;
		}
		
		if(previous == null)
			firstWord = newWord;
		else
			previous.next = newWord;
		
		newWord.next = current;
	}
	
	public Word find(int hashKey, String wordToFind) {
		Word current = firstWord;
		
		// Search for key, but stop searching if the hashKey < what we are searching for
		// Because the list is sorted this allows us to avoid searching the whole list
		while(current != null && current.key <= hashKey) {
			// NEW
			if(current.theWord.equals(wordToFind))
				return current;
			
			current = current.next;
		}
		
		return null;
	}
	
	/*public void displayWordList() {
		Word current = firstWord;
		
		while(current != null) {
			System.out.println(current);
			current = current.next;
		}
	}*/
	
	public void displayWordList() {
		Word current = firstWord;
		
		while(current != null) {
			System.out.print(current + " -> ");
			current = current.next;
		}
	}
	
	public static void main(String[] args) {
		// Make a 11 item array that will hold words and definitions
		SeparateChaining wordHashTable = new SeparateChaining(11);
		String wordLookUp = "a";
		
		// Keep retrieve requests until x is entered
		while(!wordLookUp.equalsIgnoreCase("x")) {
			System.out.println(": ");
			wordLookUp = new Scanner(System.in).nextLine();

			// Look for the word requested and print it out to screen
			System.out.println(wordHashTable.find(wordLookUp));
		}
		
		// Display every item in the array with the index they are associated with
		wordHashTable.displayTheArray();
	}
}