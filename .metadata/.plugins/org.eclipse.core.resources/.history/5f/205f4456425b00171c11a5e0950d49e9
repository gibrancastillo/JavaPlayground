package com.ccc.ht.openhashing;

/**
 * A Hash Table data structure with a hashing function that handles collisions with Separate Chaining using <<< an array linked list >>>.
 * 
 * Hashing - The process of accessing a record by mapping a key value to a position in the table
 * 
 * Hash Function - The function that maps key values to positions in the table.  A good hash function minimizes the chance of collisions
 * occurring in the first place.  A good hash function will have the following properties:
 * 1. Efficiently computable, use only very fast operations.
 * 2. Make use of all info provided by key, thus maximizing the number of possible hash values
 * 3 Maps similar keys to very different hash values
 * 4. Hash values should uniformly distribute the keys (Each table position equally likely for each key) across table. 
 * 
 * Hash Table - The array that holds the records.  Combine the random access ability of an array with the dynamism of a linked list.
 * Slots - A position (index) in the hash table.
 * Separate Chaining - Also called Open Hashing, the idea is to make each position or slot in the hash table point to
 *                     a linked list of records that have same hash function value.  Therefore, the worst lookup time is O(n/k) where
 *                     n is the number of elements in linked list and k is the size of the hash table.  But since k is a constant the
 *                     time complexity is just O(n) which is the worst case lookup time for a linked list, theoretically perspective.
 *                     In the real world O(n/k) can be a huge improvement; for instance, assume that k = 10, would you rather 100 seconds
 *                     or 100/k = 10 seconds for Microsoft Word to finish spell checking your document.
 * 
 * If we think of a Hash Table as an array then a hash function is used to generate a unique key for every item in the array.
 * The position the item goes in is known as the slot. Hashing doesn't work very well in situations in which duplicate data is stored.
 * Also it isn't good for searching for anything except a specific key. However, a Hash Table is a data structure that offers fast
 * insertion, deletion and searching capabilities.
 * 
 * From the String key you get the hash code (a.k.a hash value), from the hash code you get the index in the array.
 * 
 * ====================================================================================================================================
 * Clustering - once a collision occurs, you significally increase chances that another collision will occurs in the same slot or area
 *              This tendency of linear probing to cluster items together is known as Primary Clustering.
 *              Another technique that eliminates primary clustering is called Quadratic Probing
 *              
 * Ordering the Linked List by key value provides an advantage in the case of an unsuccessful search, since we know to stop searching
 * the list once we encounter a key that is greater than the one being searched for.  If records on the list are unordered or ordered
 * by frequency, then an unsuccessful search will need to visit every record on the list.
 * 
 * Open Hashing (separate chaining) is most appropriate when the hash table is kept in main memory, implemented with a standard in-memory
 * linked list.  Storing an open hash table on disk in an efficient way is difficult, since members of a given linked list may be stored
 * on different disk blocks.  This would result in multiple disk accesses when searching for a particular key value, which defeats
 * the purpose of using hashing.
 * ====================================================================================================================================
 * 
 * Time Complexity
 * A good hash table and a good hash function gives you a constant time O(1) but
 * linear time O(n) in the worst case scenario (lost of collisions, etc)
 * 
 * @author gecasti
 *
 */
public class SeparateChaining {

	WordList[] theArray;
	int arraySize;
	int itemsInArray = 0;

	public String[][] elementsToAdd = {
			{ "ace", "Very good" },
			{ "act", "Take action" },
			{ "add", "Join (something) to something else" },
			{ "age", "Grow old" },
			{ "ago", "Before the present" },
			{ "aid", "Help, assist, or support" },
			{ "aim", "Point or direct" },
			{ "air", "Invisible gaseous substance" },
			{ "all", "Used to refer to the whole quantity" },
			{ "amp",
					"Unit of measure for the strength of an electrical current" },
			{ "and", "Used to connect words" }, { "ant", "A small insect" },
			{ "any", "Used to refer to one or some of a thing" },
			{ "ape", "A large primate" },
			{ "apt", "Appropriate or suitable in the circumstances" },
			{ "arc", "A part of the circumference of a curve" },
			{ "are", "Unit of measure, equal to 100 square meters" },
			{ "ark", "The ship built by Noah" },
			{ "arm", "Two upper limbs of the human body" },
			{ "art", "Expression or application of human creative skill" },
			{ "ash", "Powdery residue left after the burning" },
			{ "ask", "Say something in order to obtain information" },
			{ "asp", "Small southern European viper" },
			{ "ass", "Hoofed mammal" },
			{ "ate", "To put (food) into the mouth and swallow it" },
			{ "atm", "Unit of pressure" },
			{ "awe", "A feeling of reverential respect" },
			{ "axe", "Edge tool with a heavy bladed head" },
			{ "aye", "An affirmative answer" } };

	public int stringHashFunction(String wordToHash) {

		int hashKeyValue = 0;

		for (int i = 0; i < wordToHash.length(); i++) {

			// 'a' has the character code of 97 so subtract
			// to make our letters start at 1

			int charCode = wordToHash.charAt(i) - 96;

			int hKVTemp = hashKeyValue;

			// Calculate the hash key using the 26 letters
			// plus blank

			hashKeyValue = (hashKeyValue * 27 + charCode) % arraySize;

			System.out.println("Hash Key Value " + hKVTemp
					+ " * 27 + Character Code " + charCode + " % arraySize "
					+ arraySize + " = " + hashKeyValue);

		}
		System.out.println();

		return hashKeyValue;

	}

	SeparateChaining(int size) {

		arraySize = size;

		theArray = new WordList[size];

		// Fill the array with WordLists

		for (int i = 0; i < arraySize; i++) {

			theArray[i] = new WordList();

		}

		addTheArray(elementsToAdd);

	}

	public void insert(Word newWord) {

		String wordToHash = newWord.theWord;

		// Calculate the hashkey for the Word

		int hashKey = stringHashFunction(wordToHash);

		// Add the new word to the array and set
		// the key for the word

		theArray[hashKey].insert(newWord, hashKey);

	}

	public Word find(String wordToFind) {

		// Calculate the hash key for the word

		int hashKey = stringHashFunction(wordToFind);

		// NEW

		Word theWord = theArray[hashKey].find(hashKey, wordToFind);

		return theWord;

	}

	public void addTheArray(String[][] elementsToAdd) {

		for (int i = 0; i < elementsToAdd.length; i++) {

			String word = elementsToAdd[i][0];
			String definition = elementsToAdd[i][1];

			// Create the Word with the word name and
			// definition

			Word newWord = new Word(word, definition);

			// Add the Word to theArray

			insert(newWord);

		}

	}

	public void displayTheArray() {

		for (int i = 0; i < arraySize; i++) {

			System.out.println("theArray Index " + i);

			theArray[i].displayWordList();

		}

	}

}