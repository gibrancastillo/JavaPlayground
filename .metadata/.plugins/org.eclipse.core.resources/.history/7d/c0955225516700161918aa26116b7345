package com.ccc.messenger.resources;

import java.util.List;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

import com.ccc.messenger.model.Message;
import com.ccc.messenger.service.MessageService;

/**
 * Resource based (not action based) URI class API.  In this case the resource is 'messages'.  The HTTP Methods tell you the operation to be made on the resource.
 * 
 * HTTP Request       SQL          Operation   
 *   Method        Statement
 * <> POST   --->   INSERT     --> 'C'reate              (Non-Idempotence)
 * <> GET    --->   SELECT     --> 'R'ead (Retrieve)
 * <> PUT    --->   UPDATE     --> 'U'pdate (Modify)     (Idempotence)
 * <> DELETE --->   DELETE     --> 'D'elete (Destroy)
 * 
 * You can use the HTTP Method POST to perform an update operation; however, the standard practice is to use the HTTP Method PUT.  HTTP Method POST is use for creating a new resource.
 * The HTTP Method GET is read-only; while POST, PUT and DELETE are write HTTP Methods.
 * The following are repeatable (Idempotence) HTTP Methods:  GET, PUT and DELETE.  Meaning that can be applied safely multiple times without changing the result beyond the initial application.
 * The HTTP Method POST cannot be repeated safely (Non-Idempotence).
 * 
 * 
 * A bit uncommon:  HEAD, OPTIONS, etc.
 * 
 * @author gecasti
 *
 */
@Path("/messages")
public class MessageResource {
	private MessageService messageService = new MessageService();
	
	@GET
	@Produces(MediaType.APPLICATION_XML)
	public List<Message> getMessages() {
		return messageService.getAllMessages();
	}
	
	/**
	 * Accessing Path params.  The @Path annotation can be map to the method as well; therefore, this API call
	 * http://localhost:8080/messenger/webapi/messages/1 will return message object with id 1.  This is a dynamic API call.
	 * The curly braces "{}" tell Jersey that text within the curly braces is a variable, which a portion of the URI, making it a dynamic API call.
	 * In this case we name the variable 'messageId'.  To capture or get a hold of the 'messageId' variable and send it to the MessageService class use the Jersey
	 * feature that actually passes in the value in 'messageId' as a method argument, to make that happen use the Jersey annotation @PathParam, which tells Jersey
	 * to inject the value of the variable 'messageId' from the dynamic API call into the method argument.  Jersey will try to convert the value of the variable
	 * 'messageId' from the dynamic API call to the data type of the method argument, in this case long.
	 * 
	 * @return
	 */
	@GET
	@Path("/{messageId}")
	@Produces(MediaType.TEXT_PLAIN)
	public Message getMessage(@PathParam("messageId") long messageId) {
		return messageService.getMessage(messageId);
	}
	
	/**
	 * Accessing Path params.  The @Path annotation can be map to the method as well; therefore, this API call
	 * http://localhost:8080/messenger/webapi/messages/test will return "respond with test"  The problem with this is that this API call is static
	 * @return
	 */
	@GET
	@Path("/test")
	@Produces(MediaType.TEXT_PLAIN)
	public String test() {
		return "respond with test";
	}
}