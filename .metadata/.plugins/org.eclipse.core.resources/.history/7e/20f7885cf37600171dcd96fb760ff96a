package com.ccc.guitars;

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

/**
 * Flexibility: Without me, you’ll never actually make the customer happy. No matter how well-designed
 *              your application is, I’m the thing that puts a smile on the customer’s face.
 * 
 * Encapsulation: I’m all about reuse and making sure you’re not trying to solve a problem that someone else has already figured out.
 * 
 * Functionality: You use me to keep the parts of your code that stay the same separate from the parts that change;
 *                then it’s really easy to make changes to your code without breaking everything.
 * 
 * Design Pattern: Use me so that your software can change and grow without constant rework. I keep your application from being fragile.
 * 
 * 
 * Great Software in three way steps:
 * 1. Make sure your software does what the customer wants it to do.
 * =================================================================
 * This step focuses on the customer.  Make sure the application does what it's supposed to do FIRST.  So even if
 * the customers think of new ways to use the software, it doesn't break or give them unexpected results.
 * This is where getting good requirements and doing some analysis (an art of discovery) comes in.
 * 
 * 2. Apply basic OO principles to add flexibility.
 * ================================================
 * Once your software works, you can look for any duplicate code that might have slipped in, and make sure you are
 * using good OO programming techniques.  Great software is code that is Object-Oriented.  So there is not a bunch
 * of duplicate code, and each object pretty much controls its own behavior.  It's also easy to extend because your
 * design is really solid and flexible.
 * 
 * 3. Strive for a maintainable, reusable design.
 * ==============================================
 * Once you have a good object-oriented application that it does what the customer wants it to do (comply with steps 1 & 2)
 * then it's time to apply patterns (like MVC) and principles (like scalability) to make sure your software is ready to use
 * for years to come.
 * Great software is when you tried-and-true design patterns and principles.  You've kept your objects loosely coupled, and
 * your code open for extension (inheritance) but closed for modifications (encapsulation with immutable).  That also helps
 * make the code more reusable, so you don't have to rework everything to use parts of your application over and over again.
 * 
 * @author gecasti
 *
 */
public class FindInstrumentTester {
	
	public static void main(String[] args) {
		// Set up Rick's inventory
		Inventory inventory = new Inventory();
		initializeInventory(inventory);
		
		Map properties = new HashMap();
		properties.put("builder", Builder.GIBSON);
		properties.put("backWood", Wood.MAPLE);
		InstrumentSpec whatBryanLikes = new InstrumentSpec(properties);
		
		List matchingInstruments = inventory.search(whatBryanLikes);
		
		if(!matchingInstruments.isEmpty()) {
			System.out.println("Bryan, you might like these instruments:");
			for (Iterator i = matchingInstruments.iterator(); i.hasNext(); ) {
				Instrument instrument = (Instrument)i.next();
				InstrumentSpec spec = instrument.getSpec();
				System.out.println("We have a " + spec.getProperty("instrumentType") +
						" with the following properties:");
				for (Iterator j = spec.getProperties().keySet().iterator(); 
						j.hasNext(); ) {
					String propertyName = (String)j.next();
					if (propertyName.equals("instrumentType"))
						continue;
					System.out.println("    " + propertyName + ": " +
							spec.getProperty(propertyName));
				}  
				System.out.println("  You can have this " + 
						spec.getProperty("instrumentType") + " for $" + 
						instrument.getPrice() + "\n---");
			}
		} else {
			System.out.println("Sorry, Bryan, we have nothing for you.");
		}
	}

	private static void initializeInventory(Inventory inventory) {
		Map properties = new HashMap();
		properties.put("instrumentType", InstrumentType.GUITAR);
		properties.put("builder", Builder.COLLINGS);
		properties.put("model", "CJ");
		properties.put("type", Type.ACOUSTIC);
		properties.put("numStrings", 6);
		properties.put("topWood", Wood.INDIAN_ROSEWOOD);
		properties.put("backWood", Wood.SITKA);
		inventory.addInstrument("11277", 3999.95, new InstrumentSpec(properties));

		properties.put("builder", Builder.MARTIN);
		properties.put("model", "D-18");
		properties.put("topWood", Wood.MAHOGANY);
		properties.put("backWood", Wood.ADIRONDACK);
		inventory.addInstrument("122784", 5495.95, new InstrumentSpec(properties));

		properties.put("builder", Builder.FENDER);
		properties.put("model", "Stratocastor");
		properties.put("type", Type.ELECTRIC);
		properties.put("topWood", Wood.ALDER);
		properties.put("backWood", Wood.ALDER);
		inventory.addInstrument("V95693", 1499.95, new InstrumentSpec(properties));
		inventory.addInstrument("V9512", 1549.95, new InstrumentSpec(properties));

		properties.put("builder", Builder.GIBSON);
		properties.put("model", "Les Paul");
		properties.put("topWood", Wood.MAPLE);
		properties.put("backWood", Wood.MAPLE);
		inventory.addInstrument("70108276", 2295.95, 
				new InstrumentSpec(properties));

		properties.put("model", "SG '61 Reissue");
		properties.put("topWood", Wood.MAHOGANY);
		properties.put("backWood", Wood.MAHOGANY);
		inventory.addInstrument("82765501", 1890.95, 
				new InstrumentSpec(properties));

		properties.put("instrumentType", InstrumentType.MANDOLIN);
		properties.put("type", Type.ACOUSTIC);
		properties.put("model", "F-5G");
		properties.put("backWood", Wood.MAPLE);
		properties.put("topWood", Wood.MAPLE);
		properties.remove("numStrings");
		inventory.addInstrument("9019920", 5495.99, new InstrumentSpec(properties));

		properties.put("instrumentType", InstrumentType.BANJO);
		properties.put("model", "RB-3 Wreath");
		properties.remove("topWood");
		properties.put("numStrings", 5);
		inventory.addInstrument("8900231", 2945.95, new InstrumentSpec(properties));
	}
}